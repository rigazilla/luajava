# Modified from https://github.com/libgdx/libgdx/blob/master/.github/workflows/build-publish.yml
name: Docker Build and Publish

on:
  workflow_dispatch:
  pull_request:
    branches: [main]
  push:
    tags:
      - '*'
    paths-ignore:
      - '.github/**'
      - 'docs/**'
      - 'README.md'
    branches:
      - main

env:
  MACOSX_DEPLOYMENT_TARGET: "10.10"

jobs:
  apple-natives:
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      - run: echo "JAVA_17=$JAVA_HOME" >> $GITHUB_ENV
      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v3
      - name: Build natives
        run: |
          ./gradlew jniGen jnigenBuildMacOsX64 jnigenBuildMacOsXARM64 jnigenBuildIOS
      - name: Test
        run: |
          ./gradlew :example:test :jsr223:test :jpms-example:run
      - name: Upload macOS natives
        uses: actions/upload-artifact@v4
        with:
          name: apple-natives
          path: ./*/libs
          retention-days: 5

  most-natives:
    environment: Codecov
    runs-on: ubuntu-latest
    container:
      image: ubuntu:20.04
      env:
        DEBIAN_FRONTEND: noninteractive
    steps:
      - name: Install basic dependencies
        run: |
          apt-get update
          apt-get install -y curl wget git build-essential software-properties-common
          apt-get install -y ca-certificates gnupg lsb-release
          apt-get install -y ant unzip
          
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          
      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '8'
      - run: echo "JAVA_8=$JAVA_HOME" >> $GITHUB_ENV
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      - run: echo "JAVA_17=$JAVA_HOME" >> $GITHUB_ENV
      
      - name: Download llvm-mingw
        uses: robinraju/release-downloader@v1.10
        with:
          repository: 'mstorsjo/llvm-mingw'
          tag: 20240619
          fileName: llvm-mingw-20240619-ucrt-ubuntu-20.04-x86_64.tar.xz
          tarBall: false
          zipBall: false
          
      - name: Set up llvm-mingw
        run: |
          mkdir -p /usr/local
          tar -Jxf llvm-mingw-20240619-ucrt-ubuntu-20.04-x86_64.tar.xz -C /usr/local
          echo "PATH=/usr/local/llvm-mingw-20240619-ucrt-ubuntu-20.04-x86_64/bin:$PATH" >> $GITHUB_ENV
          
      - name: Install cross-compilation toolchains
        run: |
          apt update
          # x86_64
          apt install -y --force-yes gcc g++
          apt install -y --force-yes libc6-dev linux-libc-dev linux-libc-dev-amd64-cross
          # x86
          apt install -y --force-yes gcc-i686-linux-gnu g++-i686-linux-gnu
          apt install -y --force-yes lib32stdc++-9-dev libstdc++-9-dev-i386-cross
          apt install -y --force-yes libc6-dev-i386 libc6-dev-i386-cross linux-libc-dev-i386-cross
          apt install -y g++-multilib
          # arm64
          apt install -y --force-yes gcc-aarch64-linux-gnu g++-aarch64-linux-gnu libc6-dev-arm64-cross
          apt install -y --force-yes libstdc++-9-dev-arm64-cross linux-libc-dev-arm64-cross
          # armhf
          apt install -y --force-yes gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf libc6-dev-armhf-cross
          apt install -y --force-yes libstdc++-9-dev-armhf-cross linux-libc-dev-armhf-cross
          # TODO: riscv64
          # Windows
          apt install -y --force-yes mingw-w64 lib32z1
          
      - name: Install additional dependencies for PatchELF
        run: |
          apt install -y autoconf automake libtool make
          
      - name: Install PatchELF (verneed-fix)
        run: |
          git clone https://github.com/gudzpoz/patchelf.git
          cd patchelf
          git checkout 1684a4606be1fef189d04a465adc0c9d31421dac
          ./bootstrap.sh
          ./configure
          make
          make check
          `pwd`/src/patchelf --version
          echo "`pwd`/src" >> $GITHUB_PATH

      - name: Set up Android NDK
        uses: android-actions/setup-android@v3
        with:
          packages: ndk;23.2.8568313
        env:
          JAVA_HOME: ${{ env.JAVA_17 }}

      - name: Configure NDK environment variables
        run: |
          echo "ANDROID_NDK_LATEST_HOME=$ANDROID_SDK_ROOT/ndk/23.2.8568313" >> $GITHUB_ENV
          echo "NDK_HOME=$ANDROID_SDK_ROOT/ndk/23.2.8568313" >> $GITHUB_ENV
          echo "$ANDROID_SDK_ROOT/ndk/23.2.8568313" >> $GITHUB_PATH

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v3
        
      - name: Build natives
        run: |
          export NDK_HOME=$ANDROID_NDK_LATEST_HOME
          echo "NDK_HOME=$NDK_HOME"
          ls -l $NDK_HOME
          which ndk-build
          ./gradlew jniGen jnigenBuildLinux jnigenBuildLinux64
          ./gradlew jniGen jnigenBuildLinuxARM jnigenBuildLinuxARM64
          # TODO: ./gradlew jniGen jnigenBuildLinuxRISCV64
          ./gradlew jniGen jnigenBuildAndroid jnigenBuildWindows jnigenBuildWindows64 # skip jnigenBuildWindowsARM64
          
      - name: Test (Desktop)
        run: |
          export NDK_HOME=$ANDROID_NDK_LATEST_HOME
          ./gradlew --info --stacktrace :example:test :jsr223:test :jpms-example:run
          
      - name: Jacoco Test Report
        run: |
          export NDK_HOME=$ANDROID_NDK_LATEST_HOME
          ./gradlew jacocoTestReport
          
      - name: Upload test result
        uses: codecov/codecov-action@v4
        with:
          files: >-
            ./lua51/build/reports/jacoco/report.xml,
            ./lua52/build/reports/jacoco/report.xml,
            ./lua53/build/reports/jacoco/report.xml,
            ./lua54/build/reports/jacoco/report.xml,
            ./luajit/build/reports/jacoco/report.xml,
            ./luaj/build/reports/jacoco/report.xml,
            ./luajava/build/reports/jacoco/report.xml,
            ./jsr223/build/reports/jacoco/report.xml
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true
          
      - name: Upload all output libs
        uses: actions/upload-artifact@v4
        with:
          name: most-natives
          path: ./*/libs
          retention-days: 5

  linux-testing:
    runs-on: ubuntu-latest
    needs:
      - most-natives
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'
      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '8'
      - run: echo "JAVA_8=$JAVA_HOME" >> $GITHUB_ENV
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'
      - run: echo "JAVA_11=$JAVA_HOME" >> $GITHUB_ENV
      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v3
      - name: Download most-natives artifact
        uses: actions/download-artifact@v4
        with:
          name: most-natives
      - name: JniGen
        run: |
          ./gradlew jniGen
      - name: Build example
        run: |
          ./gradlew :example:shadowJar
      - name: Test on Ubuntu 14.04
        run: |
          sudo docker build -t ljtest-glibc -f example/docker/glibc/Dockerfile example/build/libs
          sudo docker run --rm ljtest-glibc
      - name: Test on Alpine
        run: |
          sudo docker build -t ljtest-musl -f example/docker/musl/Dockerfile example/build/libs
          sudo docker run --rm ljtest-musl
  pack-natives:
    environment: OSSRH
    needs:
      - apple-natives
      - most-natives
      - linux-testing
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'
      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '8'
      - run: echo "JAVA_8=$JAVA_HOME" >> $GITHUB_ENV
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'
      - run: echo "JAVA_11=$JAVA_HOME" >> $GITHUB_ENV
      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v3
      - name: Download apple-natives artifact
        uses: actions/download-artifact@v4
        with:
          name: apple-natives
      - name: Download most-natives artifact
        uses: actions/download-artifact@v4
        with:
          name: most-natives
      - name: JniGen
        run: |
          ./gradlew jniGen
      - name: Pack desktop natives
        run: |
          ant -f lua51/jni/build.xml pack-natives
          ant -f lua52/jni/build.xml pack-natives
          ant -f lua53/jni/build.xml pack-natives
          ant -f lua54/jni/build.xml pack-natives
          ant -f luajit/jni/build.xml pack-natives
      - name: Pack Android AAR
        run: |
          ./gradlew :android:assemble
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: natives
          path: ./*/libs
      - name: Release?
        if: |
          startsWith(github.ref, 'refs/tags/')
        run: echo "IS_RELEASE=true" >> $GITHUB_ENV
      - name: Publish
        if: ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
          GPG_KEY_ID: ${{ secrets.SIGNING_KEY_ID }}
          GPG_PASSPHRASE: ${{ secrets.SIGNING_PASSPHRASE }}
          GPG_SECKEY: ${{ secrets.SIGNING_SECRET_KEY }}
          GITHUB_REF: ${{ github.ref }}
        run: |
          ./gradlew build -x test
          ./gradlew publish -Dorg.gradle.parallel=false
      - name: Build example
        run: |
          ./gradlew :example:shadowJar
      - name: Upload example
        uses: actions/upload-artifact@v4
        with:
          name: example
          path: example/build/libs/example-all.jar
      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          draft: true
          files: example/build/libs/example-all.jar
  mac-arm-test:
    needs:
      - pack-natives
    runs-on: macos-14
    steps:
      - name: Download example tests
        uses: actions/download-artifact@v4
        with:
          name: example
      - name: Run example tests
        run: |
          java -jar example-all.jar --test
  linux-arm-test:
    environment: Bitrise
    needs:
      - pack-natives
    runs-on: ubuntu-22.04
    steps:
      - name: Trigger CircleCI tests for Linux on arm64
        env:
          CIRCLECI_TOKEN: ${{ secrets.CIRCLECI_TOKEN }}
        run: |
          curl -X POST -H "Circle-Token: $CIRCLECI_TOKEN" https://circleci.com/api/v2/project/github/gudzpoz/luajava/pipeline
