buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath 'com.badlogicgames.gdx:gdx-jnigen-gradle:2.5.2'
    }
}

plugins {
    id 'java'
    id 'java-library'
}

repositories {
    mavenCentral()
}

group = rootProject.group
version = rootProject.version

// âœ… Ensure all Java compile tasks use UTF-8
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
    options.charSet = 'UTF-8'
    options.docEncoding = 'UTF-8'
}

configurations {
    desktopNatives {
        canBeConsumed = true
        canBeResolved = false
    }

    instrumentedJars {
        canBeConsumed = true
        canBeResolved = false
        extendsFrom api, implementation, runtimeOnly
    }
}

dependencies {
    api project(':luajava')
}

apply plugin: 'com.badlogicgames.gdx.gdx-jnigen'

jnigen {
    sharedLibName = 'lua52'

    all {
        cFlags += ' -DLUA_COMPAT_ALL'
        cppFlags += ' -DLUA_COMPAT_ALL'
        headerDirs = ['../../jni/luajava', 'mod', 'lua52']
        cppExcludes = ['lua52/**/*']
        cExcludes = ['lua52/**/*']
        libraries = ' -lm '
    }

    add(Windows, x32)
    add(Windows, x64)
    add(Windows, x64, ARM)

    add(Linux, x32)
    add(Linux, x64)
    add(Linux, x32, ARM)
    add(Linux, x64, ARM)
    // TODO: Until we have a RISCV toolchain on Ubuntu.
    // add(Linux, x64, RISCV)
    each({ it.os == Linux }) {
        String linuxFlags = ' -D_FORTIFY_SOURCE=0 -DLUA_USE_DLOPEN '
        cFlags += linuxFlags
        cppFlags += linuxFlags
    }

    add(MacOsX, x64)
    add(MacOsX, x64, ARM)
    each({ it.os == MacOsX }) {
        String macFlags = ' -DLUA_USE_DLOPEN '
        libraries = ''
        cFlags += macFlags
        cppFlags += macFlags
    }

    add(Android) {
        String androidFlags = ' -D_FORTIFY_SOURCE=1 -DLUA_USE_DLOPEN '
        cFlags += androidFlags
        cppFlags += androidFlags
        androidApplicationMk = [
                'APP_PLATFORM := android-21',
                "APP_CFLAG :=$androidFlags",
        ]
    }

    robovm {
        forceLinkClasses "java.lang.Class", "java.lang.Throwable", "party.iroiro.luajava.JuaAPI"
    }
    add(IOS, x64) {
        libraries = ''
        xcframeworkBundleIdentifier = "party.iroiro.luajava.lua52"
        minIOSVersion = "11.0"
    }
}

artifacts {
    instrumentedJars(jar)
    desktopNatives(jnigenJarNativesDesktop)
}

tasks.named('jar') {
    manifest {
        attributes('Automatic-Module-Name': 'party.iroiro.luajava.lua52')
    }
}

tasks.jnigen.dependsOn(tasks.build)
